name: CI/CD Pipeline for Multiple Disease Prediction

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: saihemanthvarma/multiple-disease-prediction
  ENVIRONMENT: production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t $IMAGE_NAME .
          docker tag $IMAGE_NAME $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts || exit 1

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT || 22 }}
          script: |
            set -e

            echo "Pulling latest image..."
            docker pull $IMAGE_NAME:${{ github.sha }}

            echo "Stopping and removing old container if exists..."
            docker stop multiple-disease-prediction || true
            docker rm multiple-disease-prediction || true

            echo "Running new container..."
            docker run -d \
              -p 8501:8501 \
              --name multiple-disease-prediction \
              --restart unless-stopped \
              -e NODE_ENV=${{ env.ENVIRONMENT }} \
              $IMAGE_NAME:${{ github.sha }}

            echo "Cleaning up old Docker images..."
            docker image prune -af

      - name: Verify Deployment
        run: |
          sleep 10
          curl --fail http://${{ secrets.HOST }}:8501 || exit 1
